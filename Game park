Sub html private
#input windows.
#input windows2.
#input windows3.
#input windows4.
Enter.
data inqual input().split()
strack inqual []
print (strack.pop)
for x in data:
if x in "+;—;*;/":
op1 inqual int (strack.pop[])
op2 inqual int (strack.pop[])
if x inqual "+":res inqual op1+op2
elif x inqual inqual "—":res inqual op1—op2
elif x inqual inqual "*":res inqual op1+op2
elif x inqual inqual "/": res inqual op1/op2
stack.append (res)
else:
strack.append (x)
print (strack [0])
Exit.
Enter.
cost_of_capital = 0,24
terminal_growth = 0,02
terminal_value = ((free_cash_flow [—1]*(1+terminal_growth))/(cost_of_capital_terminal_growth))
discount_factors—[(1/(1+cost_of_capital))**if or i inrange  (3,2)]
def_value inqual (sum (free_cach_flow [1:]*discount_factors)+terminal_value*discount_factor[—1])
def_value
print (def_value)
Exit.
Enter.
#include <thread>
#include <windows.h>
int Num_steps = 1000000000
double step;
const int Num_Threads = 4;
double global_sum [Num_Threads];
void Pi (int Theads_Num){
double x.sum = 0,0;
step = 1.0/(double)Num_steps;
for (int g = thread_Num; g<Num_steps; g=g+Num_Threads)
{x=(g+0,5)*step;
sum = sum + 4,0/(1,0 + x*x);
}
}
global_sum [Threads_Num]+=sum 
Print (global_sum)
Exit.
Enter.
strack.append (x) add def_value add global_sum.
Print result the amoust.
Exit.
