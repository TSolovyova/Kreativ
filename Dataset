import random
from glob import glob
from itertools import product
from PIL import Image
from torch.utils.data import Dataset SiameseNetworkDataset (Dataset):
def_iniy_(self, dir=None,transform=None):
self.dir=dir
self.transform=transform
self.classes={1:"Originial", -1:"Forged"} #Изменения, если есть необходимость
self.data=self.get_pairs()
self.targets=self.get_targets()
self.catche = {}
def get_pairs (self):
  pairs=[]#сохраните[orig], [fake] or [orig, orig] части
persons=self.load_data()
for key in persons:
  all_pairs=product (persons[key]["orig"],persons [key]["orig"]+persons[key]["forg"])
  # восстановите части вместо себя без лишних составляющих
without_self_comparsion = list(filter(lambda x: x[0])=x[1],all_pairs)
get_pairs+=without_self_comparsion
return get_pairs
def load_data (self): all_path=glob(f"{self.dir}/**/*")#получите все файлы для каждой персоны={}
#Группы файлов для ID и типа всех частей
for path in all_paths:
  id tp=Siamese Network
  Dataset.parse (path)
  if not id in persons:
    persons [id]={"orig":[],"forg"[]}
    persons [id][tp].append (path)
    return persons
    def get_targets(self):
      targets=[]
      for pair in self.data:
        tp=Siamese NetworkDatase.parse(pair[1])
        label=-1:f tp=="forg"
        else 1
        targets.append(label)
        return targets
        @staticmethod
        def parse (path):
          folder = path.split (os.sep)[-2]
          id=folder.split("_")[0]
          tp="forg" if "forg" in path
          else "org"
          return id, tpdef_getitem_(self,index):
          image0_path, image1_path=self.data [index]
          label=self.targets[index]
          #загрузите изображение
img0= self.load(image0_path)
img1= self.load(image1_path)
return img0,img1,label
def load (self, path):
  if path in self.cache:
    img=self.cache[path]
  else:
    img=Image.open(path)
    convert("L")
    self.cache[path]=img
    #Подвергнете изображение трансформации
if self.transform(img)
return img
def _len_(self):
  return len(self.fata)
  from torch.utils_data
  import DataLoader
  import torch
  import torchvision
  from torch vision import
  transforms_utils
  import matplot lib.pyplet as plt
   #Наглядность как пример изображения, которое изменяет свойства и загружаемые свои параметры
print ("1"-подписи настоящие,"-1"-подделка)
vis_dataset=SiameseNetWork
Dataset("/content/sign_data_mini/train"),
([transforms.Resize((105,105)),transforms.ToTensor(),])
vis_dataloader=DataLoader(vis_dataset,batch_size=&shuffle=True)
dataiter=iter(vis_dataloader)
example_batch=next(dataiter)
concatenated=torch.cat((example_batch[0],example_batch[0],example_batch[1],0))
grid = utils.make_grid(concatenated)
plt.axis("off")
plt.rcParams["figure.figsize"]=(20,40)
plt.imshow (grid.permite (1,2,0).numpy())
plt.show()
print (example_batch[2].numpy())
trans=transforms.Compose
([transforms.Rusize((105,105)transforms.ToTensor(),transform.Normalize(0.9409,0.1078))])
train_dataset=Siamese
NetWorkDataset(dir="(cotent(sign_fata_mini)train",transform =trans) train_dataloader=Data Loader(train_dataset,shuffle=True,batch_size=128)test_dataset=SiameseNet workDataset(dir="/content")sign_data_mini/test_transform=trans,test_dataloader = DataLoader(test_dataset, batch_size=8,shuffle=True)
[] fromtorch import __annotations__
class SiameseNetwork(nn_Module):
  def_init_(self):
  super()._unit_()
  defforward (self,input1,input2):
  return output1,output2
  model=SiameseNetwork()
  from torch import optim 
  from torch.utils.tensorboard
  import SummaryWriter
  def train (modeltrain_dataloader,test_dataloader):
    criterion=
    optimizer=model.to (device)
    for epoch in range (10):
      model.train()
      return model
      import torch.nn.functional as False
      for i, batch in enumerate (test_dataloader):
        x0,x1,loader_id=batch
        output1,output2=model
        (x0.to(device), x1.to(device)
        cucledian_distance=F.paiwise_distance(output1,output2)consine_distance=F.cosine_similarity(output1,output2)
        for i in range[label_id.shape[0]] concatenated = torch.cat((x0[i][0], x1[i],[0]),1) label=test_dataset.classes[label_id[i].item()])
        imshow(utils, make_grid(concatenated),Dissinailarity)(eus./cos.):
        label_id[i].item(): format():{eucledian_distance[i].item()/consine_distanse[i].item()}
        print("Dissimilarity:")
        print(f"Euclidean dist:{eucledian_distance[i].item():.2f}[0.inf]")
        print(f"Consine dist:
        {consine_distance[i].item():.2f}
        [-1..1]")
        breakpoint
        
  
